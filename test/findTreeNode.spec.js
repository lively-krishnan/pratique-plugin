/* Automatically generated by '../scripts/bin/new.js' */
import { findTreeNode } from '../packages/findTreeNode'

const tree = [
  {
    value: 'ceshi1',
    label: '测试1',
    children: [
      {
        value: 'ceshi1-1',
        label: '测试1-1',
        children: [
          {
            value: 'ceshi1-1-1',
            label: '测试1-1-1',
          },
          {
            value: 'ceshi1-1-1',
            label: '测试1-1-1',
          },
        ],
      },
      {
        value: 'ceshi1-2',
        label: '测试1-2',
        children: [
          {
            value: 'ceshi1-2-1',
            label: '测试1-2-1',
          },
        ],
      },
    ],
  },
  {
    value: 'ceshi2',
    label: '测试2',
    children: [
      {
        value: 'ceshi2-1',
        label: '测试2-1',
        children: [
          {
            value: 'ceshi2-1-1',
            label: '测试2-1-1',
          },
        ],
      },
    ],
  },
]

describe('Create your first use case', () => {
  it('测试是否传入树结构', () => {
    const result = []
    expect(findTreeNode('222', (data) => data.value === 'ceshi1-2-1', 'value')).toEqual(result)
  })

  it('fn 传入 假值，得到类型报错', () => {
    expect(() => findTreeNode(tree, null)).toThrow()
  })

  it('获取自身节点及父节点value', () => {
    const result = ['ceshi1', 'ceshi1-2', 'ceshi1-2-1']
    expect(findTreeNode(tree, (data) => data.value === 'ceshi1-2-1', 'value')).toEqual(result)
  })

  it('获取自身节点及父节点label', () => {
    const result = ['测试1', '测试1-2', '测试1-2-1']
    expect(findTreeNode(tree, (data) => data.value === 'ceshi1-2-1', 'label')).toEqual(result)
  })

  it('获取自身节点及父节点所有属性', () => {
    const result = [
      {
        value: 'ceshi2',
        label: '测试2',
        children: [
          {
            value: 'ceshi2-1',
            label: '测试2-1',
            children: [
              {
                value: 'ceshi2-1-1',
                label: '测试2-1-1',
              },
            ],
          },
        ],
      },
      {
        value: 'ceshi2-1',
        label: '测试2-1',
        children: [
          {
            value: 'ceshi2-1-1',
            label: '测试2-1-1',
          },
        ],
      },
      {
        value: 'ceshi2-1-1',
        label: '测试2-1-1',
      },
    ]
    expect(findTreeNode(tree, (data) => data.value === 'ceshi2-1-1', null, true)).toEqual(result)
  })

  it('返回最后一级整段数据', () => {
    const result = {
      value: 'ceshi1-2-1',
      label: '测试1-2-1',
    }
    const p = findTreeNode(tree, (data) => data.value === 'ceshi1-2-1')
    expect(p[p.length - 1]).toEqual(result)
  })
  it('返回最后一级整段数据,更改value值', () => {
    // 原本数据: { value: 'ceshi1-2-1', label: '测试1-2-1'}
    const result = {
      value: '测试数据',
      label: '测试1-2-1',
    }
    const p = findTreeNode(tree, (data) => data.value === 'ceshi1-2-1', null, { value: '测试数据' })
    expect(p[p.length - 1]).toEqual(result)
  })

  it('自定义键值 随意传入不是 tree下的属性，不更改data 数据', () => {
    // 原本数据: { value: 'ceshi1-2-1', label: '测试1-2-1'}
    const result = {
      value: 'ceshi1-2-1',
      label: '测试1-2-1',
    }
    const p = findTreeNode(tree, (data) => data.value === 'ceshi1-2-1', null, null)
    expect(p[p.length - 1]).not.toBe(result)
  })

  it('测试传入不存在的键值对,', () => {
    expect(() => findTreeNode(tree, (data) => data.value === 'ceshi1-2-1', ['value1', 'label1'])).toThrow()
  })

  it('返回对象指定最后一级键值', () => {
    const result = {
      value: 'ceshi1-2-1',
      label: '测试1-2-1',
    }
    const p = findTreeNode(tree, (data) => data.value === 'ceshi1-2-1', ['value', 'label'])
    expect(p[p.length - 1]).not.toBe(result)
  })
})
