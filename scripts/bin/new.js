console.log()
process.on('exit', () => {
  console.log()
})

if (!process.argv[2]) {
  console.error('[函数名]必填 - Please enter new methods name')
  process.exit(1)
}

const fileSave = require('file-save')
const path = require('path')

const methodsName = process.argv[2]
const methodsFile = require('../../methods.json')

const Files = [
  {
    path: path.resolve(__dirname, '../../packages/'),
    filename: `${methodsName}.js`,
    content: `/* Automatically generated by '../build/bin/new.js' */
/**
 * @function ${methodsName}
 * @desc 
 * 
 * @param {} 描述
 * @param {string=} [name=] 可选描述
 * 
 * @see 
 * @author 
 * 
 * @example
 * 
 * @returns
 */
export function ${methodsName} () {

}
    `,
  },
  {
    path: path.resolve(__dirname, '../../test'),
    filename: `${methodsName}.spec.js`,
    content: ` /* Automatically generated by '../build/bin/new.js' */
import { ${methodsName} } from '../packages/${methodsName}'

describe('Create your first use case', () => {
  it('测试1', ()=> {
    // expect().toBe()
  })
})
  `,
  },
]

if (methodsFile[methodsName]) {
  console.error(`${methodsName} 已存在.`)
  process.exit(1)
}

methodsFile[methodsName] = `../packages/${methodsName}.js`

fileSave(path.join(__dirname, '../../methods.json')).write(JSON.stringify(methodsFile, null, '  '), 'utf8').end('\n')

Files.forEach((file) => {
  fileSave(path.join(file.path, file.filename)).write(file.content, 'utf8').end('\n')
})

if (process.env.custom === 'create') {
  // 更新入口文件 引入
  const { exec } = require('child_process')
  exec('npm run build:file')
}

console.log('DONE!')
